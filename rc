"
" scott@smemsh.net
" http://smemsh.net/src/.vim/
" http://spdx.org/licenses/GPL-2.0
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible
set cpoptions           -=ae
set cpoptions           +=Er$

set nocindent
set smartindent
set autoindent
set textwidth           =78

set backspace           =2
set complete            =t,.,i,w,b,k
set noesckeys
set fileformats         =unix,dos,mac
set hlsearch
set hidden
set history             =10000
set incsearch
set ignorecase
set laststatus          =2
set lazyredraw
set listchars           +=tab:.\ ,trail:$,extends:>
set listchars           -=eol:$
set list
set matchtime           =15
set report              =1
set norestorescreen
set ruler
set scrolloff           =999
set selection           =old
set shortmess           +=aI
set showbreak           =<
set showcmd
set showfulltag
set showmatch
set sidescroll          =1
set smartcase
set splitbelow
set ttyfast
set ttyscroll           =999
set nostartofline
set viminfo             ='999,f1,%
set visualbell
set whichwrap           =b,s,h,l,<,>,[,]
set wildmenu
set wildmode            =list,full

" irritating menace
set nodigraph

" possibly dangerous
set nomodeline

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let datadirs =[
	\['backupdir',  'backups',   '',       ],
	\['directory',  'swaps',     '//,.',   ],
	\['undodir',    'undo',      '',       ],
\]

for dir in datadirs
	let vimvar = dir[0]
	let subdir = dir[1]
	let append = dir[2]
	let path = $HOME . "/var/vim/" . subdir
	if (exists('&' . vimvar) && exists("*mkdir"))
		if ! isdirectory(path)
			mkdir(path)
		endif
	execute "set " . vimvar . '=' . path . append
	endif
endfor

" TODO this duplicates set above, but that set does not have a test
" for capability (nor do any of the dir sets)
"
if has("persistent_undo")
	set undodir=~/var/vim/undo
	set undofile
endif

" lost edits too many times... this is before persistent undo
"
set writebackup
set backup
set backupskip          =
set patchmode           = " patchmode always saves in pwd; if empty do not use
set backupext           =.bak " would prefer empty but $patchmode cant be same

" we have to do this before the write because if it's just
" backupext, it has a permanent static value set at vim start
"
autocmd BufWritePre * let &backupext = '-' . strftime("%Y%m%d%H%M%S")

" write swapfile asynchronously but more frequently
"
if exists('&fsync')
set nofsync
set swapsync            =
set updatecount         =20 " chars between swapfile writes
set updatetime          =1000 " msecs idle before swapfile writes
endif

if ! &compatible
set dictionary =
	\/usr/share/dict/words,
	\$HOME/.ispell_english,
	\$HOME/.aspell.en.pws
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set statusline =%-5.50f%m%r%w%y
	\\ b%n%=%b
	\\ 0x%B,
	\\ %o
	\\ 0x%O,
	\\ L%l/%L
	\\ C%c%V
	\\ %P

"""

filetype off
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

" TODO: is this the source of the strange indents?
"filetype plugin indent on
filetype plugin on
syntax enable

"""

source ~/.vim/globals
source ~/.vim/functions
source ~/.vim/maps
source ~/.vim/cscope
source ~/.vim/color

" EOF

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" for buffertabs plugin
"
"let g:buftabs_only_basename = 1
"let g:buftabs_in_statusline = 1
"let g:buftabs_active_highlight_group = "StatusLine"
"let g:buftabs_inactive_highlight_group = "StatusLineNC"
"let g:buftabs_separator                = "."
"let g:buftabs_marker_start     = "("
"let g:buftabs_marker_end       = ")"
"let g:buftabs_marker_modified  = "*"

" defaults:
"
"g:buftabs_marker_start    [
"g:buftabs_marker_end      ]
"g:buftabs_separator       -
"g:buftabs_marker_modified !
"
" plugins accidentally erased:
" DrawIt AnsiEscPlugin cecutil 
